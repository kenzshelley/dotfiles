# Square stuff (first so my stuff overrides)
if [ -f ~/.work ]; then
  source ~/Development/config_files/square/zshrc
fi

# Put python3 symlinks ahead of system on path
PATH=/usr/local/opt/python/libexec/bin:$PATH
# Put homebrew ahead of system on path PATH=/user/local/bin:$PATH
# General
export VISUAL='nvim'
export EDITOR=$VISUAL
export TERM=xterm-256color

## History
# This gets set in square zshrc :/ unsetopt appendhistory
setopt inc_append_history
setopt APPEND_HISTORY
setopt HIST_IGNORE_DUPS
export HISTFILE=$HOME/.zsh_history
export HISTSIZE=100000
export SAVEHIST=100000

# set lpass timeout LPASS_AGENT_TIMEOUT=0; # 1 day in seconds

## vim mode
#bindkey -v
## make reverse search work in vim mode
bindkey '^R' history-incremental-pattern-search-backward


# Custom Powerline Settings
POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(dir)
POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(custom_git_branch)
POWERLEVEL9K_CUSTOM_GIT_BRANCH="zsh_git_branch"
POWERLEVEL9K_CUSTOM_GIT_BRANCH_BACKGROUND="211"
POWERLEVEL9K_CUSTOM_GIT_BRANCH_FOREGROUND="black"

# Put poetry on path
PATH=$PATH:~/.poetry/bin

# Setup poetry autocomplete
fpath+=~/.zfunc

# Custom Functions
zsh_git_branch() {
  out=$(git branch | grep \* | cut -c3-) >& /dev/null;
  if [ "$out" = "" ]; then
    return
  fi

  out="î‚  $out";

  echo $out
}
git_branch_current() {
  git rev-parse --abbrev-ref HEAD
}

delete_merged_branches() {
  local branches=("${(@f)$(gb)}")
  for branch in $branches; do
    if [[ "$branch" =~ "master" ]]; then
      continue
    fi
    if [[ "$branch" =~ "$(git_branch_current)" ]]; then
      continue
    fi
    echo $branch

    setopt shwordsplit
    local array=($branch)
    local branch_name=$array[1]
    unsetopt shwordsplit

    git branch -d $branch_name
  done
}

pr_warning() {
  local pr_warning_string='Did you:\n * Make everything final that should be final\n * Check for random new lines\n * Actually test this as much as possible\n * SQUASH\n * CHECK FOR WARNINGS. NPES.\n * If it involves $$, fucking be careful.'
  echo $pr_warning_string
}

# zplug
if [[ `uname -m` == 'arm64' ]]; then
  export ZPLUG_HOME=/opt/homebrew/opt/zplug
else
  export ZPLUG_HOME=/usr/local/opt/zplug
fi

source $ZPLUG_HOME/init.zsh

# bhilburn version has a fucked up commit that breaks everything
#zplug "bhilburn/powerlevel9k", use:powerlevel9k.zsh-theme
zplug "modules/utility", from:prezto
zplug "modules/git", from:prezto
#zplug "kenzshelley/powerlevel9k", use:powerlevel9k.zsh-theme
zplug "kenzshelley/branch-hider"
zplug "zsh-users/zsh-syntax-highlighting"
zplug "modules/history-substring-search", from:prezto
zplug "modules/prompt", from:prezto
zplug "romkatv/powerlevel10k", as:theme, depth:1

zplug install
zplug load

# Git Aliases -- Keep these below zplug so that my aliases overwrite plugins'.
alias gpr='~/Development/config_files/bin/gpr' # broke this somehow, too lazy to fix, don't want to reinstall cause worried will break other shit
alias vim='mvim -v'
# alias vi='mvim -v'
alias vi='nvim'
alias gl='git log'
alias gb='git branch'
alias gbv='git branch -vv'
alias gco='git checkout'
alias gs='git status'
alias gd='git diff'
alias ga='git add'
alias gppr='pr_warning && git push origin HEAD:$(git branch | grep \* | cut -c3-) && gpr'
alias gfppr='pr_warning && git push -f origin HEAD:$(git branch | grep \* | cut -c3-) && gpr'
alias gfp='pr_warning && git push -f origin HEAD:$(git branch | grep \* | cut -c3-)'
alias gp='pr_warning && git push origin HEAD:$(git branch | grep \* | cut -c3-)'
alias gbd='delete_merged_branches'
alias gupdate='gco master && git pull && gco - && git rebase master'
alias gupdate-i='gco master && git pull && gco - && git rebase -i master'
alias gc='gco master && git pull && gbd'
alias k='kochiku'
alias ku='kubectl'
alias gra='git commit -a --fixup head && git rebase -i --autosquash head~2'
alias grap='gra && gfp'
alias deploys='python3 ~/Development/risksys/deploysneeded.py'
alias sourcez='source ~/.zshrc'
alias editz='nv ~/Development/dotfiles/config/zsh/zshrc'
alias fms='pants run signal-lib/src/main/java:feature_generator'
alias grafp='gra && gfp'
#alias pants='./pants'
alias tap='touch'
alias pssh='ssh pi@192.168.1.69'
alias nv='nvim'
alias branch='git branch --show-current'

test_gfp() {
  branch=$(git branch | grep \* | cut -c3-)
  echo $branch
  #pr_warning && git push -f origin head:$branch
}

g-to-master() {
  git checkout origin/master "$1"
}

gcob() {
  zparseopts -E -A args -- t: j:
  target=$args[-t]
  jira=$args[-j]

  if [ -z $target ]; then
    target=master
  fi

  if [ -z $jira ]; then
    gco --track -b mshelley."$1" $target
    return
  fi

  gco --track -b mshelley."$jira"."$1" $target
}

gcomb() {
  zparseopts -E -A args -- t: j:
  target=$args[-t]
  jira=$args[-j]

  if [ -z $target ]; then
    target=master
  fi

  if [ -z $jira ]; then
    gco master && gco --track -b mshelley."$1" $target
    return
  fi

  gco master && gco --track -b mshelley."$jira"."$1" $target
}

gcom() {
  gco mshelley."$1"
}

undo-fms() {
  gco origin/master signal-lib/src/main/resources/fms/acc.yaml
  gco origin/master signal-lib/src/main/resources/fms/feature-ext.yaml
  gco origin/master signal-lib/src/main/resources/fms/signal-acc.yaml
}

inew() {
  CUR_DIR_NAME=$(basename $(pwd))
  PROJ_DIR=~/Development/$CUR_DIR_NAME/squarepants/idea/
  OLD_VERSION=$(cat $PROJ_DIR/.version)
  NEW_VERSION=$(($OLD_VERSION + 1))

  OLD_NAME="$CUR_DIR_NAME-$OLD_VERSION"
  NEW_NAME="$CUR_DIR_NAME-$NEW_VERSION"

  rm -rf $PROJ_DIR/$OLD_NAME
  ./pants idea beacon:: connectedusers:: common-cloud:: foundry:: frisky:: howdah:: riskarbiter/src/main:: riskml-common:: replaying-client:: santa:: signal-lib::  signalsmith:: --idea-project-name=$NEW_NAME

  echo $NEW_VERSION > $PROJ_DIR/.version
}

iupdate() {
  CUR_DIR_NAME=$(basename $(pwd))
  PROJ_DIR=~/Development/$CUR_DIR_NAME/squarepants/idea/
  VERSION=$(cat $PROJ_DIR/.version)

  NAME="$CUR_DIR_NAME-$VERSION"

  pants idea beacon:: connectedusers:: common-cloud:: compliancepundit:: foundry:: frisky:: howdah:: riskarbiter/src/main:: riskml-common:: santa:: signal-lib:: signalsmith:: replaying-client:: --idea-project-name=$NAME
}

ptest() {
  if [ -z $1 ]; then
    echo "Please provide the name of the module you want to test"
  fi
  if [ $2 != "" ]; then
    pants test $1\:test --test-junit-test="$2" $3
    return
  fi

  ./pants test $1\:test $3
}

bm() {
  echo "updating master"
  gco master
  git pull

  echo "updating branches"
  local branches=("${(@f)$(gb)}")
  for branch in $branches; do
    echo "updating $branch"
    gco $branch
    git rebase master
    gco -
  done

  echo "finished"
}

fixfms() {
  git fetch
  gco origin/master signal-lib/src/main/resources/fms/*
  git add signal-lib/src/main/resources/fms/*
  git commit --fixup head
  git rebase -i --autosquash head~2
  gco master && git pull && gco - && git rebase master
  pants run signal-lib/src/main/java:feature_generator
}

runbt() {
  export BIGTABLE_EMULATOR_HOST=localhost:8086
  #$(gcloud beta emulators bigtable env-init)
  gcloud beta emulators bigtable start
}

gcp_tunnel() {
  ENV=$1
  TIME=180
  ~/Development/kr-ops/bin/connect-to-kp-k8s-shared.sh $ENV $TIME
}

gcp_connect() {
  APP=$1
  export POD_NAME=$(kubectl get pods --namespace $APP -l "app=$APP" -o jsonpath="{.items[0].metadata.name}")
  echo $POD_NAME
  kubectl port-forward $POD_NAME 23000:23000 --namespace $APP
}

kill_gcp_tunnels() {
  local pids=("${(@f)$(ps -ax | grep "compute_engine" | grep -v "grep" | cut -d " " -f 2)}")
  for pid in $pids; do
    echo "Killing pid $pid"
    kill -9 $pid
  done
}

# Add RVM to PATH for scripting. Make sure this is the last PATH variable change.
export PATH="$PATH:$HOME/.rvm/bin"

ftmf() {
  ulimit -n 4096
}

dstart() {
  docker-machine start
  eval "$(docker-machine env default)"
}

docker_bp() {
  docker build -t $1 -f Dockerfile .
  docker tag $1 gcr.io/$2/$1
  docker push gcr.io/$2/$1
}

dkp() {
  dir=$(basename $(pwd))
  if [ "$dir" = "Development" ]
  then
    echo "Not running because you'll delete the real kplib"
    return
  fi

  rm -rf kplib
  cp -r ../kplib ./

  sha=$(get_sha kplib)
  image="mshelley-kplib-$sha"
  repo=$1
  echo $image

  docker build -t $image -f Dockerfile .
  docker tag $image gcr.io/$repo/$image
  docker push gcr.io/$repo/$image
}

drmi() {
  docker rmi -f $(docker images -q)
}

get_sha() {
  pushd ~/Development/$1 &> /dev/null
  sha=$(git rev-parse HEAD)
  echo $sha | cut -c 1-10
  popd &> /dev/null
}


pipu() {
  pip uninstall $1 -y
  pip install ~/Development/$1
}

find_big_dirs() {
  du -k -h -d1 * | sort -h
}

clean_diff() {
  pbpaste | grep -v "Merge pull request" | grep -v square-console.sqprod | grep -v '@signal-lib-updater' | pbcopy
}

# Fix too many files issue
ftmf

source ~/.p10k.zsh

# Unclear if i need this
# Base16 Shell
BASE16_SHELL="$HOME/.config/base16-shell/"
 [ -n "$PS1" ] && \
     [ -s "$BASE16_SHELL/profile_helper.sh" ] && \
         eval "$("$BASE16_SHELL/profile_helper.sh")"
# set base16 theme
base16_material-darker

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/mshelley/Development/google-cloud-sdk/path.zsh.inc' ]; then . '/Users/mshelley/Development/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/Users/mshelley/Development/google-cloud-sdk/completion.zsh.inc' ]; then . '/Users/mshelley/Development/google-cloud-sdk/completion.zsh.inc'; fi

# Configure path for pyenv
eval "$(pyenv init --path)"
if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init -)"
fi

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && . "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# Completion setup
# The following lines were added by compinstall
zstyle ':completion:*' completer _expand _complete _ignored _approximate
zstyle ':completion:*' completions 1
zstyle ':completion:*' glob 1
zstyle ':completion:*' matcher-list 'm:{[:lower:]}={[:upper:]} r:|[._-]=** r:|=**' 'm:{[:lower:]}={[:upper:]}' 'm:{[:lower:]}={[:upper:]}' 'm:{[:lower:]}={[:upper:]}'
zstyle ':completion:*' max-errors 4 numeric
zstyle ':completion:*' substitute 1
zstyle :compinstall filename '/Users/mackenzie/.zshrc'

# enables cding without specifying full root path
setopt autocd

autoload -Uz compinit && compinit
zmodload -i zsh/complist
compinit
# End of lines added by compinstall
