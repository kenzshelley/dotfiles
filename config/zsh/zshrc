# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Set programming directory
if [ -f ~/.work ]; then
  DEV_HOME="/Users/mshelley/Development"
else 
  DEV_HOME="/Users/mackenzie/programming"
fi

# Square stuff (first so my stuff overrides)
if [ -f ~/.work ]; then
  source "$DEV_HOME/dotfiles/config_files/square/zshrc"
fi
source "$DEV_HOME/dotfiles/config/zsh/git_functions.sh"
source "$DEV_HOME/dotfiles/config/zsh/py_env_functions.sh"

# Setup Goose stuff
source ~/Development/dotfiles/config/zsh/goose.sh

# Put homebrew ahead of system on path PATH=/user/local/bin:$PATH
# General
export VISUAL='nvim'
export EDITOR=$VISUAL
export TERM=xterm-256color

## History
# This gets set in square zshrc :/ unsetopt appendhistory
setopt inc_append_history
setopt APPEND_HISTORY
setopt HIST_IGNORE_DUPS
export HISTFILE=$HOME/.zsh_history
export HISTSIZE=100000
export SAVEHIST=100000

## make reverse search work in vim mode
bindkey '^R' history-incremental-pattern-search-backward

# Custom Powerline Settings
#POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(dir)
#POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(custom_git_branch)
#POWERLEVEL9K_CUSTOM_GIT_BRANCH="zsh_git_branch"
#POWERLEVEL9K_CUSTOM_GIT_BRANCH_BACKGROUND="211"
#POWERLEVEL9K_CUSTOM_GIT_BRANCH_FOREGROUND="black"

# Put poetry on path
PATH=$PATH:~/.poetry/bin

# Setup poetry autocomplete
fpath+=~/.zfunc

# Custom Functions
zsh_git_branch() {
  out=$(git branch | grep \* | cut -c3-) >& /dev/null;
  if [ "$out" = "" ]; then
    return
  fi

  out="ÓÇ† $out";

  echo $out
}

pr_warning() {
  local pr_warning_string='Did you:\n * Make everything final that should be final\n * Check for random new lines\n * Actually test this as much as possible\n * SQUASH\n * CHECK FOR WARNINGS. NPES.\n * If it involves $$, fucking be careful.'
  echo $pr_warning_string
}

# zplug
if [[ `uname -m` == 'arm64' ]]; then
  export ZPLUG_HOME=/opt/homebrew/opt/zplug
else
  export ZPLUG_HOME=/usr/local/opt/zplug
fi

source $ZPLUG_HOME/init.zsh

zplug "modules/utility", from:prezto
zplug "modules/git", from:prezto
zplug "kenzshelley/branch-hider"
zplug "zsh-users/zsh-syntax-highlighting"
zplug "modules/history-substring-search", from:prezto
zplug "modules/prompt", from:prezto
zplug "romkatv/powerlevel10k", as:theme, depth:1
zplug "chriskempson/base16-shell", from:github

zplug install
zplug load

# Git Aliases -- Keep these below zplug so that my aliases overwrite plugins'.
alias gpr='gh pr create --web' 
alias vi='nvim'
alias gl='git log'
alias gb='git branch -vv'
alias gco='git checkout'
alias gs='git status'
alias gd='git diff'
alias ga='git add'
alias gppr='pr_warning && git push origin HEAD:$(git branch | grep \* | cut -c3-) && gpr'
alias gfppr='pr_warning && git push -f origin HEAD:$(git branch | grep \* | cut -c3-) && gpr'
alias gfp='pr_warning && git push -f origin HEAD:$(git branch | grep \* | cut -c3-)'
alias gp='pr_warning && git push origin HEAD:$(git branch | grep \* | cut -c3-)'
alias gbd='delete_merged_branches'
alias gupdate='gco $(get_main_branch) && git pull && gco - && git rebase $(get_main_branch)'
alias gc='gco $(get_main_branch) && git pull && gbd'
alias k='kochiku'
alias ku='kubectl'
alias gra='git commit -a --fixup head && git rebase -i --autosquash head~2'
alias grap='gra && gfp'
alias deploys='python3 ~/Development/risksys/deploysneeded.py'
alias sourcez='source ~/.zshrc'
alias editz="nv $DEV_HOME/dotfiles/config/zsh/zshrc"
alias grafp='gra && gfp'
alias tap='touch'
alias pssh='ssh pi@192.168.1.69'
alias nv='nvim'
alias branch='git branch --show-current | tr -d "\n"'

gcob() {
  zparseopts -E -A args -- t: j:
  target=$args[-t]
  jira=$args[-j]

  if [ -z $target ]; then
    target=$(get_main_branch)
  fi

  if [ -z $jira ]; then
    gco --track -b mshelley."$1" $target
    return
  fi

  gco --track -b mshelley."$jira"."$1" $target
}

gcomb() {
  zparseopts -E -A args -- t: j:
  target=$args[-t]
  jira=$args[-j]

  if [ -z $target ]; then
    target=$(get_main_branch)
  fi

  if [ -z $jira ]; then
    gco $(get_main_branch) && gco --track -b mshelley."$1" $target
    return
  fi

  gco $(get_main_branch) && gco --track -b mshelley."$jira"."$1" $target
}

gcom() {
  gco mshelley."$1"
}

bm() {
  echo "updating main branch"
  gco $(get_main_branch)
  git pull

  echo "updating branches"
  local branches=("${(@f)$(gb)}")
  for branch in $branches; do
    echo "updating $branch"
    gco $branch
    git rebase $(get_main_branch)
    gco -
  done

  echo "finished"
}

runbt() {
  export BIGTABLE_EMULATOR_HOST=localhost:8086
  #$(gcloud beta emulators bigtable env-init)
  gcloud beta emulators bigtable start
}

gcp_tunnel() {
  ENV=$1
  TIME=180
  ~/Development/kr-ops/bin/connect-to-kp-k8s-shared.sh $ENV $TIME
}

gcp_connect() {
  APP=$1
  export POD_NAME=$(kubectl get pods --namespace $APP -l "app=$APP" -o jsonpath="{.items[0].metadata.name}")
  echo $POD_NAME
  kubectl port-forward $POD_NAME 23000:23000 --namespace $APP
}

kill_gcp_tunnels() {
  local pids=("${(@f)$(ps -ax | grep "compute_engine" | grep -v "grep" | cut -d " " -f 2)}")
  for pid in $pids; do
    echo "Killing pid $pid"
    kill -9 $pid
  done
}

# Add RVM to PATH for scripting. Make sure this is the last PATH variable change.
export PATH="$PATH:$HOME/.rvm/bin"

ftmf() {
  ulimit -n 4096
}

dstart() {
  docker-machine start
  eval "$(docker-machine env default)"
}

docker_bp() {
  docker build -t $1 -f Dockerfile .
  docker tag $1 gcr.io/$2/$1
  docker push gcr.io/$2/$1
}

dkp() {
  dir=$(basename $(pwd))
  if [ "$dir" = "Development" ]
  then
    echo "Not running because you'll delete the real kplib"
    return
  fi

  rm -rf kplib
  cp -r ../kplib ./

  sha=$(get_sha kplib)
  image="mshelley-kplib-$sha"
  repo=$1
  echo $image

  docker build -t $image -f Dockerfile .
  docker tag $image gcr.io/$repo/$image
  docker push gcr.io/$repo/$image
}

drmi() {
  docker rmi -f $(docker images -q)
}

get_sha() {
  pushd ~/Development/$1 &> /dev/null
  sha=$(git rev-parse HEAD)
  echo $sha | cut -c 1-10
  popd &> /dev/null
}


pipu() {
  pip uninstall $1 -y
  pip install ~/Development/$1
}

find_big_dirs() {
  du -k -h -d1 * | sort -h
}

clean_diff() {
  pbpaste | grep -v "Merge pull request" | grep -v square-console.sqprod | grep -v '@signal-lib-updater' | pbcopy
}

# Fix too many files issue
ftmf

source ~/.p10k.zsh
base16_material-darker

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && . "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# Completion setup
# The following lines were added by compinstall
zstyle ':completion:*' completer _expand _complete _ignored _approximate
zstyle ':completion:*' completions 1
zstyle ':completion:*' glob 1
zstyle ':completion:*' matcher-list 'm:{[:lower:]}={[:upper:]} r:|[._-]=** r:|=**' 'm:{[:lower:]}={[:upper:]}' 'm:{[:lower:]}={[:upper:]}' 'm:{[:lower:]}={[:upper:]}'
zstyle ':completion:*' max-errors 4 numeric
zstyle ':completion:*' substitute 1
zstyle :compinstall filename '/Users/mackenzie/.zshrc'

# enables cding without specifying full root path
setopt autocd

autoload -Uz compinit && compinit
zmodload -i zsh/complist
compinit
# End of lines added by compinstall

# Created by `pipx` on 2023-03-02 18:46:48
export PATH="$PATH:/Users/mshelley/.local/bin"

# Enable cloning from github
alias git_certs='watch -n 240 "ssh -T org-49461806@github.com;ssh-add -D;ssh-add -K"' 

agent() {
    printf "${red}${bold}Make sure you are using the VPN${normal}${nc}\n"
    if [ -z "$1" ]; then
        echo "No machine given: exiting"
        return 1
    elif [[ "$1" == 'help' ]]; then
        echo "usage: agent MACHINE_NAME PROJECT"
    else
        host="$1"
    fi

    if [ -z "$2" ]; then
        PROJECT=$(gcloud config get-value project 2>/dev/null)
        echo "No project zone given, using default: $PROJECT"
    else
        PROJECT_ZONE="$2"
        echo "Using project: $PROJECT"
    fi

    echo "Setting up agent forwarding"
    gcloud compute ssh --ssh-flag="-A" --internal-ip $host --project $PROJECT
}

alias gcloud_auth="gcloud auth login; gcloud auth application-default login; gcloud auth configure-docker"
PATH="${PATH}:${HOME}/.local/bin"
export PATH="/opt/homebrew/opt/curl/bin:$PATH"
 
# Adding libexec/bin to path
export PATH=$PATH:$HOMEBREW_PREFIX/opt/python/libexec/bin


# hermit in prompt
function prompt_hermit() {
  if [[ -n $HERMIT_ENV ]]; then
    p10k segment -t "${${HERMIT_ENV:t}//\%/%%} üêö"  -f blue
  fi
}

# To customize prompt, run `p10k configure` or edit ~/Development/dotfiles/config/zsh/.p10k.zsh.
[[ ! -f ~/Development/dotfiles/config/zsh/.p10k.zsh ]] || source ~/Development/dotfiles/config/zsh/.p10k.zsh

# Generated by Hermit; START; DO NOT EDIT.
HERMIT_ROOT_BIN="${HERMIT_ROOT_BIN:-"$HOME/bin/hermit"}"
eval "$(test -x $HERMIT_ROOT_BIN && $HERMIT_ROOT_BIN shell-hooks --print --zsh)"
# Generated by Hermit; END; DO NOT EDIT.

source /opt/homebrew/opt/autoenv/activate.sh
export AUTOENV_ENABLE_LEAVE="non_empty"
PATH="${PATH}:${HOME}/.local/bin"
export PIPX_DEFAULT_PYTHON=python3.10
 
# Adding libexec/bin to path
export PATH=$PATH:/opt/homebrew/opt/python@3/libexec/bin

p10k finalize
